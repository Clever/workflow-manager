package main

import (
	trace "go.opentelemetry.io/otel/sdk/trace"
	"log"
	"os"
)

// Code generated by launch-gen DO NOT EDIT.

// LaunchConfig is auto-generated based on the launch YML file
type LaunchConfig struct {
	Deps Dependencies
	Env  Environment
	AwsResources
}

// Dependencies has clients for the service's dependencies
type Dependencies struct{}

// Environment has environment variables and their values
type Environment struct {
	KinesisStreamArn                   string
	AwsDynamoRegion                    string
	AwsDynamoPrefixWorkflows           string
	AwsDynamoPrefixStateResources      string
	AwsDynamoPrefixWorkflowDefinitions string
	AwsSfnRegion                       string
}

// AwsResources contains string IDs that will help for accessing various AWS resources
type AwsResources struct{}

// InitLaunchConfig creates a LaunchConfig
func InitLaunchConfig(exp *trace.SpanExporter) LaunchConfig {
	return LaunchConfig{
		AwsResources: AwsResources{},
		Deps:         Dependencies{},
		Env: Environment{
			AwsDynamoPrefixStateResources:      requireEnvVar("AWS_DYNAMO_PREFIX_STATE_RESOURCES"),
			AwsDynamoPrefixWorkflowDefinitions: requireEnvVar("AWS_DYNAMO_PREFIX_WORKFLOW_DEFINITIONS"),
			AwsDynamoPrefixWorkflows:           requireEnvVar("AWS_DYNAMO_PREFIX_WORKFLOWS"),
			AwsDynamoRegion:                    requireEnvVar("AWS_DYNAMO_REGION"),
			AwsSfnRegion:                       requireEnvVar("AWS_SFN_REGION"),
			KinesisStreamArn:                   requireEnvVar("KINESIS_STREAM_ARN"),
		},
	}
}

// requireEnvVar exits the program immediately if an env var is not set
func requireEnvVar(s string) string {
	val, present := os.LookupEnv(s)
	if !present {
		log.Fatalf("env var %s is not defined", s)
	}
	return val
}

// getS3NameByEnv adds "-dev" to an env var name unless we're in "production" deploy env
// We check both DEPLOY_ENV and _DEPLOY_ENV env vars, which are injected by our deployment system for Lambda and non-Lambda deployments, respectively
func getS3NameByEnv(s string) string {
	env := os.Getenv("DEPLOY_ENV")
	if env == "" {
		env = os.Getenv("_DEPLOY_ENV")
	}
	if env == "" {
		log.Fatal("Unable to determine deployment environment (DEPLOY_ENV and _DEPLOY_ENV are undefined)")
	}
	if env == "production" {
		return s
	}
	return s + "-dev"
}
