// Automatically generated by MockGen. DO NOT EDIT!
// Source: interface.go

package server

import (
	context "context"
	models "github.com/Clever/workflow-manager/gen-go/models"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *_MockControllerRecorder
}

// Recorder for MockController (not exported)
type _MockControllerRecorder struct {
	mock *MockController
}

func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &_MockControllerRecorder{mock}
	return mock
}

func (_m *MockController) EXPECT() *_MockControllerRecorder {
	return _m.recorder
}

func (_m *MockController) HealthCheck(ctx context.Context) error {
	ret := _m.ctrl.Call(_m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockControllerRecorder) HealthCheck(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HealthCheck", arg0)
}

func (_m *MockController) GetJobsForWorkflowDefinition(ctx context.Context, i *models.GetJobsForWorkflowDefinitionInput) ([]models.Job, error) {
	ret := _m.ctrl.Call(_m, "GetJobsForWorkflowDefinition", ctx, i)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) GetJobsForWorkflowDefinition(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetJobsForWorkflowDefinition", arg0, arg1)
}

func (_m *MockController) StartJobForWorkflowDefinition(ctx context.Context, i *models.JobInput) (*models.Job, error) {
	ret := _m.ctrl.Call(_m, "StartJobForWorkflowDefinition", ctx, i)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) StartJobForWorkflowDefinition(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartJobForWorkflowDefinition", arg0, arg1)
}

func (_m *MockController) CancelJob(ctx context.Context, i *models.CancelJobInput) error {
	ret := _m.ctrl.Call(_m, "CancelJob", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockControllerRecorder) CancelJob(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelJob", arg0, arg1)
}

func (_m *MockController) GetJob(ctx context.Context, jobId string) (*models.Job, error) {
	ret := _m.ctrl.Call(_m, "GetJob", ctx, jobId)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) GetJob(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetJob", arg0, arg1)
}

func (_m *MockController) PostStateResource(ctx context.Context, i *models.NewStateResource) (*models.StateResource, error) {
	ret := _m.ctrl.Call(_m, "PostStateResource", ctx, i)
	ret0, _ := ret[0].(*models.StateResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) PostStateResource(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostStateResource", arg0, arg1)
}

func (_m *MockController) DeleteStateResource(ctx context.Context, i *models.DeleteStateResourceInput) error {
	ret := _m.ctrl.Call(_m, "DeleteStateResource", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockControllerRecorder) DeleteStateResource(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteStateResource", arg0, arg1)
}

func (_m *MockController) GetStateResource(ctx context.Context, i *models.GetStateResourceInput) (*models.StateResource, error) {
	ret := _m.ctrl.Call(_m, "GetStateResource", ctx, i)
	ret0, _ := ret[0].(*models.StateResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) GetStateResource(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetStateResource", arg0, arg1)
}

func (_m *MockController) PutStateResource(ctx context.Context, i *models.PutStateResourceInput) (*models.StateResource, error) {
	ret := _m.ctrl.Call(_m, "PutStateResource", ctx, i)
	ret0, _ := ret[0].(*models.StateResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) PutStateResource(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutStateResource", arg0, arg1)
}

func (_m *MockController) GetWorkflowDefinitions(ctx context.Context) ([]models.WorkflowDefinition, error) {
	ret := _m.ctrl.Call(_m, "GetWorkflowDefinitions", ctx)
	ret0, _ := ret[0].([]models.WorkflowDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) GetWorkflowDefinitions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWorkflowDefinitions", arg0)
}

func (_m *MockController) NewWorkflowDefinition(ctx context.Context, i *models.NewWorkflowDefinitionRequest) (*models.WorkflowDefinition, error) {
	ret := _m.ctrl.Call(_m, "NewWorkflowDefinition", ctx, i)
	ret0, _ := ret[0].(*models.WorkflowDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) NewWorkflowDefinition(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewWorkflowDefinition", arg0, arg1)
}

func (_m *MockController) GetWorkflowDefinitionVersionsByName(ctx context.Context, i *models.GetWorkflowDefinitionVersionsByNameInput) ([]models.WorkflowDefinition, error) {
	ret := _m.ctrl.Call(_m, "GetWorkflowDefinitionVersionsByName", ctx, i)
	ret0, _ := ret[0].([]models.WorkflowDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) GetWorkflowDefinitionVersionsByName(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWorkflowDefinitionVersionsByName", arg0, arg1)
}

func (_m *MockController) UpdateWorkflowDefinition(ctx context.Context, i *models.UpdateWorkflowDefinitionInput) (*models.WorkflowDefinition, error) {
	ret := _m.ctrl.Call(_m, "UpdateWorkflowDefinition", ctx, i)
	ret0, _ := ret[0].(*models.WorkflowDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) UpdateWorkflowDefinition(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateWorkflowDefinition", arg0, arg1)
}

func (_m *MockController) GetWorkflowDefinitionByNameAndVersion(ctx context.Context, i *models.GetWorkflowDefinitionByNameAndVersionInput) (*models.WorkflowDefinition, error) {
	ret := _m.ctrl.Call(_m, "GetWorkflowDefinitionByNameAndVersion", ctx, i)
	ret0, _ := ret[0].(*models.WorkflowDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) GetWorkflowDefinitionByNameAndVersion(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWorkflowDefinitionByNameAndVersion", arg0, arg1)
}
