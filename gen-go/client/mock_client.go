// Automatically generated by MockGen. DO NOT EDIT!
// Source: interface.go

package client

import (
	context "context"
	models "github.com/Clever/workflow-manager/gen-go/models"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) HealthCheck(ctx context.Context) error {
	ret := _m.ctrl.Call(_m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) HealthCheck(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HealthCheck", arg0)
}

func (_m *MockClient) PostStateResource(ctx context.Context, i *models.NewStateResource) (*models.StateResource, error) {
	ret := _m.ctrl.Call(_m, "PostStateResource", ctx, i)
	ret0, _ := ret[0].(*models.StateResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) PostStateResource(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostStateResource", arg0, arg1)
}

func (_m *MockClient) DeleteStateResource(ctx context.Context, i *models.DeleteStateResourceInput) error {
	ret := _m.ctrl.Call(_m, "DeleteStateResource", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) DeleteStateResource(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteStateResource", arg0, arg1)
}

func (_m *MockClient) GetStateResource(ctx context.Context, i *models.GetStateResourceInput) (*models.StateResource, error) {
	ret := _m.ctrl.Call(_m, "GetStateResource", ctx, i)
	ret0, _ := ret[0].(*models.StateResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetStateResource(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetStateResource", arg0, arg1)
}

func (_m *MockClient) PutStateResource(ctx context.Context, i *models.PutStateResourceInput) (*models.StateResource, error) {
	ret := _m.ctrl.Call(_m, "PutStateResource", ctx, i)
	ret0, _ := ret[0].(*models.StateResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) PutStateResource(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutStateResource", arg0, arg1)
}

func (_m *MockClient) GetWorkflowDefinitions(ctx context.Context) ([]models.WorkflowDefinition, error) {
	ret := _m.ctrl.Call(_m, "GetWorkflowDefinitions", ctx)
	ret0, _ := ret[0].([]models.WorkflowDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetWorkflowDefinitions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWorkflowDefinitions", arg0)
}

func (_m *MockClient) NewWorkflowDefinition(ctx context.Context, i *models.NewWorkflowDefinitionRequest) (*models.WorkflowDefinition, error) {
	ret := _m.ctrl.Call(_m, "NewWorkflowDefinition", ctx, i)
	ret0, _ := ret[0].(*models.WorkflowDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) NewWorkflowDefinition(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewWorkflowDefinition", arg0, arg1)
}

func (_m *MockClient) GetActiveWorkflows(ctx context.Context, i *models.GetActiveWorkflowsInput) ([]models.Workflow, error) {
	ret := _m.ctrl.Call(_m, "GetActiveWorkflows", ctx, i)
	ret0, _ := ret[0].([]models.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetActiveWorkflows(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetActiveWorkflows", arg0, arg1)
}

func (_m *MockClient) NewGetActiveWorkflowsIter(ctx context.Context, i *models.GetActiveWorkflowsInput) (GetActiveWorkflowsIter, error) {
	ret := _m.ctrl.Call(_m, "NewGetActiveWorkflowsIter", ctx, i)
	ret0, _ := ret[0].(GetActiveWorkflowsIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) NewGetActiveWorkflowsIter(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewGetActiveWorkflowsIter", arg0, arg1)
}

func (_m *MockClient) GetInactiveWorkflows(ctx context.Context, i *models.GetInactiveWorkflowsInput) ([]models.Workflow, error) {
	ret := _m.ctrl.Call(_m, "GetInactiveWorkflows", ctx, i)
	ret0, _ := ret[0].([]models.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetInactiveWorkflows(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInactiveWorkflows", arg0, arg1)
}

func (_m *MockClient) NewGetInactiveWorkflowsIter(ctx context.Context, i *models.GetInactiveWorkflowsInput) (GetInactiveWorkflowsIter, error) {
	ret := _m.ctrl.Call(_m, "NewGetInactiveWorkflowsIter", ctx, i)
	ret0, _ := ret[0].(GetInactiveWorkflowsIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) NewGetInactiveWorkflowsIter(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewGetInactiveWorkflowsIter", arg0, arg1)
}

func (_m *MockClient) GetWorkflowDefinitionVersionsByName(ctx context.Context, i *models.GetWorkflowDefinitionVersionsByNameInput) ([]models.WorkflowDefinition, error) {
	ret := _m.ctrl.Call(_m, "GetWorkflowDefinitionVersionsByName", ctx, i)
	ret0, _ := ret[0].([]models.WorkflowDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetWorkflowDefinitionVersionsByName(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWorkflowDefinitionVersionsByName", arg0, arg1)
}

func (_m *MockClient) UpdateWorkflowDefinition(ctx context.Context, i *models.UpdateWorkflowDefinitionInput) (*models.WorkflowDefinition, error) {
	ret := _m.ctrl.Call(_m, "UpdateWorkflowDefinition", ctx, i)
	ret0, _ := ret[0].(*models.WorkflowDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) UpdateWorkflowDefinition(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateWorkflowDefinition", arg0, arg1)
}

func (_m *MockClient) GetWorkflowDefinitionByNameAndVersion(ctx context.Context, i *models.GetWorkflowDefinitionByNameAndVersionInput) (*models.WorkflowDefinition, error) {
	ret := _m.ctrl.Call(_m, "GetWorkflowDefinitionByNameAndVersion", ctx, i)
	ret0, _ := ret[0].(*models.WorkflowDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetWorkflowDefinitionByNameAndVersion(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWorkflowDefinitionByNameAndVersion", arg0, arg1)
}

func (_m *MockClient) GetWorkflows(ctx context.Context, i *models.GetWorkflowsInput) ([]models.Workflow, error) {
	ret := _m.ctrl.Call(_m, "GetWorkflows", ctx, i)
	ret0, _ := ret[0].([]models.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetWorkflows(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWorkflows", arg0, arg1)
}

func (_m *MockClient) StartWorkflow(ctx context.Context, i *models.StartWorkflowRequest) (*models.Workflow, error) {
	ret := _m.ctrl.Call(_m, "StartWorkflow", ctx, i)
	ret0, _ := ret[0].(*models.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) StartWorkflow(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartWorkflow", arg0, arg1)
}

func (_m *MockClient) CancelWorkflow(ctx context.Context, i *models.CancelWorkflowInput) error {
	ret := _m.ctrl.Call(_m, "CancelWorkflow", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) CancelWorkflow(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelWorkflow", arg0, arg1)
}

func (_m *MockClient) GetWorkflowByID(ctx context.Context, workflowId string) (*models.Workflow, error) {
	ret := _m.ctrl.Call(_m, "GetWorkflowByID", ctx, workflowId)
	ret0, _ := ret[0].(*models.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetWorkflowByID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWorkflowByID", arg0, arg1)
}

// Mock of GetActiveWorkflowsIter interface
type MockGetActiveWorkflowsIter struct {
	ctrl     *gomock.Controller
	recorder *_MockGetActiveWorkflowsIterRecorder
}

// Recorder for MockGetActiveWorkflowsIter (not exported)
type _MockGetActiveWorkflowsIterRecorder struct {
	mock *MockGetActiveWorkflowsIter
}

func NewMockGetActiveWorkflowsIter(ctrl *gomock.Controller) *MockGetActiveWorkflowsIter {
	mock := &MockGetActiveWorkflowsIter{ctrl: ctrl}
	mock.recorder = &_MockGetActiveWorkflowsIterRecorder{mock}
	return mock
}

func (_m *MockGetActiveWorkflowsIter) EXPECT() *_MockGetActiveWorkflowsIterRecorder {
	return _m.recorder
}

func (_m *MockGetActiveWorkflowsIter) Next(_param0 *models.Workflow) bool {
	ret := _m.ctrl.Call(_m, "Next", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockGetActiveWorkflowsIterRecorder) Next(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next", arg0)
}

func (_m *MockGetActiveWorkflowsIter) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGetActiveWorkflowsIterRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

// Mock of GetInactiveWorkflowsIter interface
type MockGetInactiveWorkflowsIter struct {
	ctrl     *gomock.Controller
	recorder *_MockGetInactiveWorkflowsIterRecorder
}

// Recorder for MockGetInactiveWorkflowsIter (not exported)
type _MockGetInactiveWorkflowsIterRecorder struct {
	mock *MockGetInactiveWorkflowsIter
}

func NewMockGetInactiveWorkflowsIter(ctrl *gomock.Controller) *MockGetInactiveWorkflowsIter {
	mock := &MockGetInactiveWorkflowsIter{ctrl: ctrl}
	mock.recorder = &_MockGetInactiveWorkflowsIterRecorder{mock}
	return mock
}

func (_m *MockGetInactiveWorkflowsIter) EXPECT() *_MockGetInactiveWorkflowsIterRecorder {
	return _m.recorder
}

func (_m *MockGetInactiveWorkflowsIter) Next(_param0 *models.Workflow) bool {
	ret := _m.ctrl.Call(_m, "Next", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockGetInactiveWorkflowsIterRecorder) Next(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next", arg0)
}

func (_m *MockGetInactiveWorkflowsIter) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGetInactiveWorkflowsIterRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}
