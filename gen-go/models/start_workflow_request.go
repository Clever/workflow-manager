package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// StartWorkflowRequest start workflow request
// swagger:model StartWorkflowRequest
type StartWorkflowRequest struct {

	// input
	Input []string `json:"input"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// queue
	Queue *string `json:"queue,omitempty"`

	// tags: object with key-value pairs; keys and values should be strings
	Tags map[string]interface{} `json:"tags,omitempty"`

	// workflow definition
	WorkflowDefinition *WorkflowDefinitionRef `json:"workflowDefinition,omitempty"`
}

// Validate validates this start workflow request
func (m *StartWorkflowRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInput(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkflowDefinition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StartWorkflowRequest) validateInput(formats strfmt.Registry) error {

	if swag.IsZero(m.Input) { // not required
		return nil
	}

	return nil
}

func (m *StartWorkflowRequest) validateWorkflowDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowDefinition) { // not required
		return nil
	}

	if m.WorkflowDefinition != nil {

		if err := m.WorkflowDefinition.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
