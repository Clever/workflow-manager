// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobAttempt job attempt
//
// swagger:model JobAttempt
type JobAttempt struct {

	// container instance a r n
	ContainerInstanceARN string `json:"containerInstanceARN,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// exit code
	ExitCode int64 `json:"exitCode,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// started at
	// Format: date-time
	StartedAt strfmt.DateTime `json:"startedAt,omitempty"`

	// stopped at
	// Format: date-time
	StoppedAt strfmt.DateTime `json:"stoppedAt,omitempty"`

	// task a r n
	TaskARN string `json:"taskARN,omitempty"`
}

// Validate validates this job attempt
func (m *JobAttempt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoppedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobAttempt) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobAttempt) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("startedAt", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobAttempt) validateStoppedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StoppedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("stoppedAt", "body", "date-time", m.StoppedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobAttempt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobAttempt) UnmarshalBinary(b []byte) error {
	var res JobAttempt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
