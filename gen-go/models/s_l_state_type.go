package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SLStateType s l state type
// swagger:model SLStateType
type SLStateType string

const (
	SLStateTypePass     SLStateType = "Pass"
	SLStateTypeTask     SLStateType = "Task"
	SLStateTypeChoice   SLStateType = "Choice"
	SLStateTypeWait     SLStateType = "Wait"
	SLStateTypeSucceed  SLStateType = "Succeed"
	SLStateTypeFail     SLStateType = "Fail"
	SLStateTypeParallel SLStateType = "Parallel"
)

// for schema
var sLStateTypeEnum []interface{}

func init() {
	var res []SLStateType
	if err := json.Unmarshal([]byte(`["Pass","Task","Choice","Wait","Succeed","Fail","Parallel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sLStateTypeEnum = append(sLStateTypeEnum, v)
	}
}

func (m SLStateType) validateSLStateTypeEnum(path, location string, value SLStateType) error {
	if err := validate.Enum(path, location, value, sLStateTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this s l state type
func (m SLStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSLStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
