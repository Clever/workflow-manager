// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SLStateMachine s l state machine
//
// swagger:model SLStateMachine
type SLStateMachine struct {

	// comment
	Comment string `json:"Comment,omitempty"`

	// start at
	StartAt string `json:"StartAt,omitempty"`

	// states
	States map[string]SLState `json:"States,omitempty"`

	// timeout seconds
	TimeoutSeconds int64 `json:"TimeoutSeconds,omitempty"`

	// version
	// Enum: [1.0]
	Version string `json:"Version,omitempty"`
}

// Validate validates this s l state machine
func (m *SLStateMachine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SLStateMachine) validateStates(formats strfmt.Registry) error {

	if swag.IsZero(m.States) { // not required
		return nil
	}

	for k := range m.States {

		if err := validate.Required("States"+"."+k, "body", m.States[k]); err != nil {
			return err
		}
		if val, ok := m.States[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

var sLStateMachineTypeVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1.0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sLStateMachineTypeVersionPropEnum = append(sLStateMachineTypeVersionPropEnum, v)
	}
}

const (

	// SLStateMachineVersionNr10 captures enum value "1.0"
	SLStateMachineVersionNr10 string = "1.0"
)

// prop value enum
func (m *SLStateMachine) validateVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sLStateMachineTypeVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SLStateMachine) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersionEnum("Version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SLStateMachine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SLStateMachine) UnmarshalBinary(b []byte) error {
	var res SLStateMachine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
