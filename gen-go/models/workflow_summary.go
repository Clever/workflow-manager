// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowSummary workflow summary
//
// swagger:model WorkflowSummary
type WorkflowSummary struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// input
	Input string `json:"input,omitempty"`

	// last job
	LastJob *Job `json:"lastJob,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"lastUpdated,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// queue
	Queue string `json:"queue,omitempty"`

	// resolved by user
	ResolvedByUser bool `json:"resolvedByUser,omitempty"`

	// workflow-id's of workflows created as retries for this workflow
	Retries []string `json:"retries"`

	// workflow-id of original workflow in case this is a retry
	RetryFor string `json:"retryFor,omitempty"`

	// status
	Status WorkflowStatus `json:"status,omitempty"`

	// stopped at
	// Format: date-time
	StoppedAt strfmt.DateTime `json:"stoppedAt,omitempty"`

	// tags: object with key-value pairs; keys and values should be strings
	Tags map[string]interface{} `json:"tags,omitempty"`

	// workflow definition
	WorkflowDefinition *WorkflowDefinition `json:"workflowDefinition,omitempty"`
}

// Validate validates this workflow summary
func (m *WorkflowSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoppedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowDefinition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowSummary) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowSummary) validateLastJob(formats strfmt.Registry) error {

	if swag.IsZero(m.LastJob) { // not required
		return nil
	}

	if m.LastJob != nil {
		if err := m.LastJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastJob")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowSummary) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowSummary) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *WorkflowSummary) validateStoppedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StoppedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("stoppedAt", "body", "date-time", m.StoppedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowSummary) validateWorkflowDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowDefinition) { // not required
		return nil
	}

	if m.WorkflowDefinition != nil {
		if err := m.WorkflowDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflowDefinition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowSummary) UnmarshalBinary(b []byte) error {
	var res WorkflowSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
