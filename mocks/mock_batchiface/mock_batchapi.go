// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/batch/batchiface (interfaces: BatchAPI)

// Package mock_batchiface is a generated GoMock package.
package mock_batchiface

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	batch "github.com/aws/aws-sdk-go/service/batch"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBatchAPI is a mock of BatchAPI interface
type MockBatchAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBatchAPIMockRecorder
}

// MockBatchAPIMockRecorder is the mock recorder for MockBatchAPI
type MockBatchAPIMockRecorder struct {
	mock *MockBatchAPI
}

// NewMockBatchAPI creates a new mock instance
func NewMockBatchAPI(ctrl *gomock.Controller) *MockBatchAPI {
	mock := &MockBatchAPI{ctrl: ctrl}
	mock.recorder = &MockBatchAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatchAPI) EXPECT() *MockBatchAPIMockRecorder {
	return m.recorder
}

// CancelJob mocks base method
func (m *MockBatchAPI) CancelJob(arg0 *batch.CancelJobInput) (*batch.CancelJobOutput, error) {
	ret := m.ctrl.Call(m, "CancelJob", arg0)
	ret0, _ := ret[0].(*batch.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJob indicates an expected call of CancelJob
func (mr *MockBatchAPIMockRecorder) CancelJob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockBatchAPI)(nil).CancelJob), arg0)
}

// CancelJobRequest mocks base method
func (m *MockBatchAPI) CancelJobRequest(arg0 *batch.CancelJobInput) (*request.Request, *batch.CancelJobOutput) {
	ret := m.ctrl.Call(m, "CancelJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.CancelJobOutput)
	return ret0, ret1
}

// CancelJobRequest indicates an expected call of CancelJobRequest
func (mr *MockBatchAPIMockRecorder) CancelJobRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRequest", reflect.TypeOf((*MockBatchAPI)(nil).CancelJobRequest), arg0)
}

// CancelJobWithContext mocks base method
func (m *MockBatchAPI) CancelJobWithContext(arg0 aws.Context, arg1 *batch.CancelJobInput, arg2 ...request.Option) (*batch.CancelJobOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelJobWithContext", varargs...)
	ret0, _ := ret[0].(*batch.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobWithContext indicates an expected call of CancelJobWithContext
func (mr *MockBatchAPIMockRecorder) CancelJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobWithContext", reflect.TypeOf((*MockBatchAPI)(nil).CancelJobWithContext), varargs...)
}

// CreateComputeEnvironment mocks base method
func (m *MockBatchAPI) CreateComputeEnvironment(arg0 *batch.CreateComputeEnvironmentInput) (*batch.CreateComputeEnvironmentOutput, error) {
	ret := m.ctrl.Call(m, "CreateComputeEnvironment", arg0)
	ret0, _ := ret[0].(*batch.CreateComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComputeEnvironment indicates an expected call of CreateComputeEnvironment
func (mr *MockBatchAPIMockRecorder) CreateComputeEnvironment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComputeEnvironment", reflect.TypeOf((*MockBatchAPI)(nil).CreateComputeEnvironment), arg0)
}

// CreateComputeEnvironmentRequest mocks base method
func (m *MockBatchAPI) CreateComputeEnvironmentRequest(arg0 *batch.CreateComputeEnvironmentInput) (*request.Request, *batch.CreateComputeEnvironmentOutput) {
	ret := m.ctrl.Call(m, "CreateComputeEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.CreateComputeEnvironmentOutput)
	return ret0, ret1
}

// CreateComputeEnvironmentRequest indicates an expected call of CreateComputeEnvironmentRequest
func (mr *MockBatchAPIMockRecorder) CreateComputeEnvironmentRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComputeEnvironmentRequest", reflect.TypeOf((*MockBatchAPI)(nil).CreateComputeEnvironmentRequest), arg0)
}

// CreateComputeEnvironmentWithContext mocks base method
func (m *MockBatchAPI) CreateComputeEnvironmentWithContext(arg0 aws.Context, arg1 *batch.CreateComputeEnvironmentInput, arg2 ...request.Option) (*batch.CreateComputeEnvironmentOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComputeEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*batch.CreateComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComputeEnvironmentWithContext indicates an expected call of CreateComputeEnvironmentWithContext
func (mr *MockBatchAPIMockRecorder) CreateComputeEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComputeEnvironmentWithContext", reflect.TypeOf((*MockBatchAPI)(nil).CreateComputeEnvironmentWithContext), varargs...)
}

// CreateJobQueue mocks base method
func (m *MockBatchAPI) CreateJobQueue(arg0 *batch.CreateJobQueueInput) (*batch.CreateJobQueueOutput, error) {
	ret := m.ctrl.Call(m, "CreateJobQueue", arg0)
	ret0, _ := ret[0].(*batch.CreateJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobQueue indicates an expected call of CreateJobQueue
func (mr *MockBatchAPIMockRecorder) CreateJobQueue(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobQueue", reflect.TypeOf((*MockBatchAPI)(nil).CreateJobQueue), arg0)
}

// CreateJobQueueRequest mocks base method
func (m *MockBatchAPI) CreateJobQueueRequest(arg0 *batch.CreateJobQueueInput) (*request.Request, *batch.CreateJobQueueOutput) {
	ret := m.ctrl.Call(m, "CreateJobQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.CreateJobQueueOutput)
	return ret0, ret1
}

// CreateJobQueueRequest indicates an expected call of CreateJobQueueRequest
func (mr *MockBatchAPIMockRecorder) CreateJobQueueRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobQueueRequest", reflect.TypeOf((*MockBatchAPI)(nil).CreateJobQueueRequest), arg0)
}

// CreateJobQueueWithContext mocks base method
func (m *MockBatchAPI) CreateJobQueueWithContext(arg0 aws.Context, arg1 *batch.CreateJobQueueInput, arg2 ...request.Option) (*batch.CreateJobQueueOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobQueueWithContext", varargs...)
	ret0, _ := ret[0].(*batch.CreateJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobQueueWithContext indicates an expected call of CreateJobQueueWithContext
func (mr *MockBatchAPIMockRecorder) CreateJobQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobQueueWithContext", reflect.TypeOf((*MockBatchAPI)(nil).CreateJobQueueWithContext), varargs...)
}

// DeleteComputeEnvironment mocks base method
func (m *MockBatchAPI) DeleteComputeEnvironment(arg0 *batch.DeleteComputeEnvironmentInput) (*batch.DeleteComputeEnvironmentOutput, error) {
	ret := m.ctrl.Call(m, "DeleteComputeEnvironment", arg0)
	ret0, _ := ret[0].(*batch.DeleteComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComputeEnvironment indicates an expected call of DeleteComputeEnvironment
func (mr *MockBatchAPIMockRecorder) DeleteComputeEnvironment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComputeEnvironment", reflect.TypeOf((*MockBatchAPI)(nil).DeleteComputeEnvironment), arg0)
}

// DeleteComputeEnvironmentRequest mocks base method
func (m *MockBatchAPI) DeleteComputeEnvironmentRequest(arg0 *batch.DeleteComputeEnvironmentInput) (*request.Request, *batch.DeleteComputeEnvironmentOutput) {
	ret := m.ctrl.Call(m, "DeleteComputeEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DeleteComputeEnvironmentOutput)
	return ret0, ret1
}

// DeleteComputeEnvironmentRequest indicates an expected call of DeleteComputeEnvironmentRequest
func (mr *MockBatchAPIMockRecorder) DeleteComputeEnvironmentRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComputeEnvironmentRequest", reflect.TypeOf((*MockBatchAPI)(nil).DeleteComputeEnvironmentRequest), arg0)
}

// DeleteComputeEnvironmentWithContext mocks base method
func (m *MockBatchAPI) DeleteComputeEnvironmentWithContext(arg0 aws.Context, arg1 *batch.DeleteComputeEnvironmentInput, arg2 ...request.Option) (*batch.DeleteComputeEnvironmentOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteComputeEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*batch.DeleteComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComputeEnvironmentWithContext indicates an expected call of DeleteComputeEnvironmentWithContext
func (mr *MockBatchAPIMockRecorder) DeleteComputeEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComputeEnvironmentWithContext", reflect.TypeOf((*MockBatchAPI)(nil).DeleteComputeEnvironmentWithContext), varargs...)
}

// DeleteJobQueue mocks base method
func (m *MockBatchAPI) DeleteJobQueue(arg0 *batch.DeleteJobQueueInput) (*batch.DeleteJobQueueOutput, error) {
	ret := m.ctrl.Call(m, "DeleteJobQueue", arg0)
	ret0, _ := ret[0].(*batch.DeleteJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobQueue indicates an expected call of DeleteJobQueue
func (mr *MockBatchAPIMockRecorder) DeleteJobQueue(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobQueue", reflect.TypeOf((*MockBatchAPI)(nil).DeleteJobQueue), arg0)
}

// DeleteJobQueueRequest mocks base method
func (m *MockBatchAPI) DeleteJobQueueRequest(arg0 *batch.DeleteJobQueueInput) (*request.Request, *batch.DeleteJobQueueOutput) {
	ret := m.ctrl.Call(m, "DeleteJobQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DeleteJobQueueOutput)
	return ret0, ret1
}

// DeleteJobQueueRequest indicates an expected call of DeleteJobQueueRequest
func (mr *MockBatchAPIMockRecorder) DeleteJobQueueRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobQueueRequest", reflect.TypeOf((*MockBatchAPI)(nil).DeleteJobQueueRequest), arg0)
}

// DeleteJobQueueWithContext mocks base method
func (m *MockBatchAPI) DeleteJobQueueWithContext(arg0 aws.Context, arg1 *batch.DeleteJobQueueInput, arg2 ...request.Option) (*batch.DeleteJobQueueOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobQueueWithContext", varargs...)
	ret0, _ := ret[0].(*batch.DeleteJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobQueueWithContext indicates an expected call of DeleteJobQueueWithContext
func (mr *MockBatchAPIMockRecorder) DeleteJobQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobQueueWithContext", reflect.TypeOf((*MockBatchAPI)(nil).DeleteJobQueueWithContext), varargs...)
}

// DeregisterJobDefinition mocks base method
func (m *MockBatchAPI) DeregisterJobDefinition(arg0 *batch.DeregisterJobDefinitionInput) (*batch.DeregisterJobDefinitionOutput, error) {
	ret := m.ctrl.Call(m, "DeregisterJobDefinition", arg0)
	ret0, _ := ret[0].(*batch.DeregisterJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterJobDefinition indicates an expected call of DeregisterJobDefinition
func (mr *MockBatchAPIMockRecorder) DeregisterJobDefinition(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterJobDefinition", reflect.TypeOf((*MockBatchAPI)(nil).DeregisterJobDefinition), arg0)
}

// DeregisterJobDefinitionRequest mocks base method
func (m *MockBatchAPI) DeregisterJobDefinitionRequest(arg0 *batch.DeregisterJobDefinitionInput) (*request.Request, *batch.DeregisterJobDefinitionOutput) {
	ret := m.ctrl.Call(m, "DeregisterJobDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DeregisterJobDefinitionOutput)
	return ret0, ret1
}

// DeregisterJobDefinitionRequest indicates an expected call of DeregisterJobDefinitionRequest
func (mr *MockBatchAPIMockRecorder) DeregisterJobDefinitionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterJobDefinitionRequest", reflect.TypeOf((*MockBatchAPI)(nil).DeregisterJobDefinitionRequest), arg0)
}

// DeregisterJobDefinitionWithContext mocks base method
func (m *MockBatchAPI) DeregisterJobDefinitionWithContext(arg0 aws.Context, arg1 *batch.DeregisterJobDefinitionInput, arg2 ...request.Option) (*batch.DeregisterJobDefinitionOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterJobDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*batch.DeregisterJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterJobDefinitionWithContext indicates an expected call of DeregisterJobDefinitionWithContext
func (mr *MockBatchAPIMockRecorder) DeregisterJobDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterJobDefinitionWithContext", reflect.TypeOf((*MockBatchAPI)(nil).DeregisterJobDefinitionWithContext), varargs...)
}

// DescribeComputeEnvironments mocks base method
func (m *MockBatchAPI) DescribeComputeEnvironments(arg0 *batch.DescribeComputeEnvironmentsInput) (*batch.DescribeComputeEnvironmentsOutput, error) {
	ret := m.ctrl.Call(m, "DescribeComputeEnvironments", arg0)
	ret0, _ := ret[0].(*batch.DescribeComputeEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeComputeEnvironments indicates an expected call of DescribeComputeEnvironments
func (mr *MockBatchAPIMockRecorder) DescribeComputeEnvironments(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeComputeEnvironments", reflect.TypeOf((*MockBatchAPI)(nil).DescribeComputeEnvironments), arg0)
}

// DescribeComputeEnvironmentsRequest mocks base method
func (m *MockBatchAPI) DescribeComputeEnvironmentsRequest(arg0 *batch.DescribeComputeEnvironmentsInput) (*request.Request, *batch.DescribeComputeEnvironmentsOutput) {
	ret := m.ctrl.Call(m, "DescribeComputeEnvironmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DescribeComputeEnvironmentsOutput)
	return ret0, ret1
}

// DescribeComputeEnvironmentsRequest indicates an expected call of DescribeComputeEnvironmentsRequest
func (mr *MockBatchAPIMockRecorder) DescribeComputeEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeComputeEnvironmentsRequest", reflect.TypeOf((*MockBatchAPI)(nil).DescribeComputeEnvironmentsRequest), arg0)
}

// DescribeComputeEnvironmentsWithContext mocks base method
func (m *MockBatchAPI) DescribeComputeEnvironmentsWithContext(arg0 aws.Context, arg1 *batch.DescribeComputeEnvironmentsInput, arg2 ...request.Option) (*batch.DescribeComputeEnvironmentsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeComputeEnvironmentsWithContext", varargs...)
	ret0, _ := ret[0].(*batch.DescribeComputeEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeComputeEnvironmentsWithContext indicates an expected call of DescribeComputeEnvironmentsWithContext
func (mr *MockBatchAPIMockRecorder) DescribeComputeEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeComputeEnvironmentsWithContext", reflect.TypeOf((*MockBatchAPI)(nil).DescribeComputeEnvironmentsWithContext), varargs...)
}

// DescribeJobDefinitions mocks base method
func (m *MockBatchAPI) DescribeJobDefinitions(arg0 *batch.DescribeJobDefinitionsInput) (*batch.DescribeJobDefinitionsOutput, error) {
	ret := m.ctrl.Call(m, "DescribeJobDefinitions", arg0)
	ret0, _ := ret[0].(*batch.DescribeJobDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobDefinitions indicates an expected call of DescribeJobDefinitions
func (mr *MockBatchAPIMockRecorder) DescribeJobDefinitions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobDefinitions", reflect.TypeOf((*MockBatchAPI)(nil).DescribeJobDefinitions), arg0)
}

// DescribeJobDefinitionsRequest mocks base method
func (m *MockBatchAPI) DescribeJobDefinitionsRequest(arg0 *batch.DescribeJobDefinitionsInput) (*request.Request, *batch.DescribeJobDefinitionsOutput) {
	ret := m.ctrl.Call(m, "DescribeJobDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DescribeJobDefinitionsOutput)
	return ret0, ret1
}

// DescribeJobDefinitionsRequest indicates an expected call of DescribeJobDefinitionsRequest
func (mr *MockBatchAPIMockRecorder) DescribeJobDefinitionsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobDefinitionsRequest", reflect.TypeOf((*MockBatchAPI)(nil).DescribeJobDefinitionsRequest), arg0)
}

// DescribeJobDefinitionsWithContext mocks base method
func (m *MockBatchAPI) DescribeJobDefinitionsWithContext(arg0 aws.Context, arg1 *batch.DescribeJobDefinitionsInput, arg2 ...request.Option) (*batch.DescribeJobDefinitionsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*batch.DescribeJobDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobDefinitionsWithContext indicates an expected call of DescribeJobDefinitionsWithContext
func (mr *MockBatchAPIMockRecorder) DescribeJobDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobDefinitionsWithContext", reflect.TypeOf((*MockBatchAPI)(nil).DescribeJobDefinitionsWithContext), varargs...)
}

// DescribeJobQueues mocks base method
func (m *MockBatchAPI) DescribeJobQueues(arg0 *batch.DescribeJobQueuesInput) (*batch.DescribeJobQueuesOutput, error) {
	ret := m.ctrl.Call(m, "DescribeJobQueues", arg0)
	ret0, _ := ret[0].(*batch.DescribeJobQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobQueues indicates an expected call of DescribeJobQueues
func (mr *MockBatchAPIMockRecorder) DescribeJobQueues(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobQueues", reflect.TypeOf((*MockBatchAPI)(nil).DescribeJobQueues), arg0)
}

// DescribeJobQueuesRequest mocks base method
func (m *MockBatchAPI) DescribeJobQueuesRequest(arg0 *batch.DescribeJobQueuesInput) (*request.Request, *batch.DescribeJobQueuesOutput) {
	ret := m.ctrl.Call(m, "DescribeJobQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DescribeJobQueuesOutput)
	return ret0, ret1
}

// DescribeJobQueuesRequest indicates an expected call of DescribeJobQueuesRequest
func (mr *MockBatchAPIMockRecorder) DescribeJobQueuesRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobQueuesRequest", reflect.TypeOf((*MockBatchAPI)(nil).DescribeJobQueuesRequest), arg0)
}

// DescribeJobQueuesWithContext mocks base method
func (m *MockBatchAPI) DescribeJobQueuesWithContext(arg0 aws.Context, arg1 *batch.DescribeJobQueuesInput, arg2 ...request.Option) (*batch.DescribeJobQueuesOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*batch.DescribeJobQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobQueuesWithContext indicates an expected call of DescribeJobQueuesWithContext
func (mr *MockBatchAPIMockRecorder) DescribeJobQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobQueuesWithContext", reflect.TypeOf((*MockBatchAPI)(nil).DescribeJobQueuesWithContext), varargs...)
}

// DescribeJobs mocks base method
func (m *MockBatchAPI) DescribeJobs(arg0 *batch.DescribeJobsInput) (*batch.DescribeJobsOutput, error) {
	ret := m.ctrl.Call(m, "DescribeJobs", arg0)
	ret0, _ := ret[0].(*batch.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobs indicates an expected call of DescribeJobs
func (mr *MockBatchAPIMockRecorder) DescribeJobs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobs", reflect.TypeOf((*MockBatchAPI)(nil).DescribeJobs), arg0)
}

// DescribeJobsRequest mocks base method
func (m *MockBatchAPI) DescribeJobsRequest(arg0 *batch.DescribeJobsInput) (*request.Request, *batch.DescribeJobsOutput) {
	ret := m.ctrl.Call(m, "DescribeJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DescribeJobsOutput)
	return ret0, ret1
}

// DescribeJobsRequest indicates an expected call of DescribeJobsRequest
func (mr *MockBatchAPIMockRecorder) DescribeJobsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsRequest", reflect.TypeOf((*MockBatchAPI)(nil).DescribeJobsRequest), arg0)
}

// DescribeJobsWithContext mocks base method
func (m *MockBatchAPI) DescribeJobsWithContext(arg0 aws.Context, arg1 *batch.DescribeJobsInput, arg2 ...request.Option) (*batch.DescribeJobsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobsWithContext", varargs...)
	ret0, _ := ret[0].(*batch.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobsWithContext indicates an expected call of DescribeJobsWithContext
func (mr *MockBatchAPIMockRecorder) DescribeJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsWithContext", reflect.TypeOf((*MockBatchAPI)(nil).DescribeJobsWithContext), varargs...)
}

// ListJobs mocks base method
func (m *MockBatchAPI) ListJobs(arg0 *batch.ListJobsInput) (*batch.ListJobsOutput, error) {
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*batch.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs
func (mr *MockBatchAPIMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockBatchAPI)(nil).ListJobs), arg0)
}

// ListJobsRequest mocks base method
func (m *MockBatchAPI) ListJobsRequest(arg0 *batch.ListJobsInput) (*request.Request, *batch.ListJobsOutput) {
	ret := m.ctrl.Call(m, "ListJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.ListJobsOutput)
	return ret0, ret1
}

// ListJobsRequest indicates an expected call of ListJobsRequest
func (mr *MockBatchAPIMockRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsRequest", reflect.TypeOf((*MockBatchAPI)(nil).ListJobsRequest), arg0)
}

// ListJobsWithContext mocks base method
func (m *MockBatchAPI) ListJobsWithContext(arg0 aws.Context, arg1 *batch.ListJobsInput, arg2 ...request.Option) (*batch.ListJobsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsWithContext", varargs...)
	ret0, _ := ret[0].(*batch.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsWithContext indicates an expected call of ListJobsWithContext
func (mr *MockBatchAPIMockRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsWithContext", reflect.TypeOf((*MockBatchAPI)(nil).ListJobsWithContext), varargs...)
}

// RegisterJobDefinition mocks base method
func (m *MockBatchAPI) RegisterJobDefinition(arg0 *batch.RegisterJobDefinitionInput) (*batch.RegisterJobDefinitionOutput, error) {
	ret := m.ctrl.Call(m, "RegisterJobDefinition", arg0)
	ret0, _ := ret[0].(*batch.RegisterJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterJobDefinition indicates an expected call of RegisterJobDefinition
func (mr *MockBatchAPIMockRecorder) RegisterJobDefinition(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterJobDefinition", reflect.TypeOf((*MockBatchAPI)(nil).RegisterJobDefinition), arg0)
}

// RegisterJobDefinitionRequest mocks base method
func (m *MockBatchAPI) RegisterJobDefinitionRequest(arg0 *batch.RegisterJobDefinitionInput) (*request.Request, *batch.RegisterJobDefinitionOutput) {
	ret := m.ctrl.Call(m, "RegisterJobDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.RegisterJobDefinitionOutput)
	return ret0, ret1
}

// RegisterJobDefinitionRequest indicates an expected call of RegisterJobDefinitionRequest
func (mr *MockBatchAPIMockRecorder) RegisterJobDefinitionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterJobDefinitionRequest", reflect.TypeOf((*MockBatchAPI)(nil).RegisterJobDefinitionRequest), arg0)
}

// RegisterJobDefinitionWithContext mocks base method
func (m *MockBatchAPI) RegisterJobDefinitionWithContext(arg0 aws.Context, arg1 *batch.RegisterJobDefinitionInput, arg2 ...request.Option) (*batch.RegisterJobDefinitionOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterJobDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*batch.RegisterJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterJobDefinitionWithContext indicates an expected call of RegisterJobDefinitionWithContext
func (mr *MockBatchAPIMockRecorder) RegisterJobDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterJobDefinitionWithContext", reflect.TypeOf((*MockBatchAPI)(nil).RegisterJobDefinitionWithContext), varargs...)
}

// SubmitJob mocks base method
func (m *MockBatchAPI) SubmitJob(arg0 *batch.SubmitJobInput) (*batch.SubmitJobOutput, error) {
	ret := m.ctrl.Call(m, "SubmitJob", arg0)
	ret0, _ := ret[0].(*batch.SubmitJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitJob indicates an expected call of SubmitJob
func (mr *MockBatchAPIMockRecorder) SubmitJob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitJob", reflect.TypeOf((*MockBatchAPI)(nil).SubmitJob), arg0)
}

// SubmitJobRequest mocks base method
func (m *MockBatchAPI) SubmitJobRequest(arg0 *batch.SubmitJobInput) (*request.Request, *batch.SubmitJobOutput) {
	ret := m.ctrl.Call(m, "SubmitJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.SubmitJobOutput)
	return ret0, ret1
}

// SubmitJobRequest indicates an expected call of SubmitJobRequest
func (mr *MockBatchAPIMockRecorder) SubmitJobRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitJobRequest", reflect.TypeOf((*MockBatchAPI)(nil).SubmitJobRequest), arg0)
}

// SubmitJobWithContext mocks base method
func (m *MockBatchAPI) SubmitJobWithContext(arg0 aws.Context, arg1 *batch.SubmitJobInput, arg2 ...request.Option) (*batch.SubmitJobOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitJobWithContext", varargs...)
	ret0, _ := ret[0].(*batch.SubmitJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitJobWithContext indicates an expected call of SubmitJobWithContext
func (mr *MockBatchAPIMockRecorder) SubmitJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitJobWithContext", reflect.TypeOf((*MockBatchAPI)(nil).SubmitJobWithContext), varargs...)
}

// TerminateJob mocks base method
func (m *MockBatchAPI) TerminateJob(arg0 *batch.TerminateJobInput) (*batch.TerminateJobOutput, error) {
	ret := m.ctrl.Call(m, "TerminateJob", arg0)
	ret0, _ := ret[0].(*batch.TerminateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateJob indicates an expected call of TerminateJob
func (mr *MockBatchAPIMockRecorder) TerminateJob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateJob", reflect.TypeOf((*MockBatchAPI)(nil).TerminateJob), arg0)
}

// TerminateJobRequest mocks base method
func (m *MockBatchAPI) TerminateJobRequest(arg0 *batch.TerminateJobInput) (*request.Request, *batch.TerminateJobOutput) {
	ret := m.ctrl.Call(m, "TerminateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.TerminateJobOutput)
	return ret0, ret1
}

// TerminateJobRequest indicates an expected call of TerminateJobRequest
func (mr *MockBatchAPIMockRecorder) TerminateJobRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateJobRequest", reflect.TypeOf((*MockBatchAPI)(nil).TerminateJobRequest), arg0)
}

// TerminateJobWithContext mocks base method
func (m *MockBatchAPI) TerminateJobWithContext(arg0 aws.Context, arg1 *batch.TerminateJobInput, arg2 ...request.Option) (*batch.TerminateJobOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateJobWithContext", varargs...)
	ret0, _ := ret[0].(*batch.TerminateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateJobWithContext indicates an expected call of TerminateJobWithContext
func (mr *MockBatchAPIMockRecorder) TerminateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateJobWithContext", reflect.TypeOf((*MockBatchAPI)(nil).TerminateJobWithContext), varargs...)
}

// UpdateComputeEnvironment mocks base method
func (m *MockBatchAPI) UpdateComputeEnvironment(arg0 *batch.UpdateComputeEnvironmentInput) (*batch.UpdateComputeEnvironmentOutput, error) {
	ret := m.ctrl.Call(m, "UpdateComputeEnvironment", arg0)
	ret0, _ := ret[0].(*batch.UpdateComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComputeEnvironment indicates an expected call of UpdateComputeEnvironment
func (mr *MockBatchAPIMockRecorder) UpdateComputeEnvironment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComputeEnvironment", reflect.TypeOf((*MockBatchAPI)(nil).UpdateComputeEnvironment), arg0)
}

// UpdateComputeEnvironmentRequest mocks base method
func (m *MockBatchAPI) UpdateComputeEnvironmentRequest(arg0 *batch.UpdateComputeEnvironmentInput) (*request.Request, *batch.UpdateComputeEnvironmentOutput) {
	ret := m.ctrl.Call(m, "UpdateComputeEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.UpdateComputeEnvironmentOutput)
	return ret0, ret1
}

// UpdateComputeEnvironmentRequest indicates an expected call of UpdateComputeEnvironmentRequest
func (mr *MockBatchAPIMockRecorder) UpdateComputeEnvironmentRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComputeEnvironmentRequest", reflect.TypeOf((*MockBatchAPI)(nil).UpdateComputeEnvironmentRequest), arg0)
}

// UpdateComputeEnvironmentWithContext mocks base method
func (m *MockBatchAPI) UpdateComputeEnvironmentWithContext(arg0 aws.Context, arg1 *batch.UpdateComputeEnvironmentInput, arg2 ...request.Option) (*batch.UpdateComputeEnvironmentOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateComputeEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*batch.UpdateComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComputeEnvironmentWithContext indicates an expected call of UpdateComputeEnvironmentWithContext
func (mr *MockBatchAPIMockRecorder) UpdateComputeEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComputeEnvironmentWithContext", reflect.TypeOf((*MockBatchAPI)(nil).UpdateComputeEnvironmentWithContext), varargs...)
}

// UpdateJobQueue mocks base method
func (m *MockBatchAPI) UpdateJobQueue(arg0 *batch.UpdateJobQueueInput) (*batch.UpdateJobQueueOutput, error) {
	ret := m.ctrl.Call(m, "UpdateJobQueue", arg0)
	ret0, _ := ret[0].(*batch.UpdateJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobQueue indicates an expected call of UpdateJobQueue
func (mr *MockBatchAPIMockRecorder) UpdateJobQueue(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobQueue", reflect.TypeOf((*MockBatchAPI)(nil).UpdateJobQueue), arg0)
}

// UpdateJobQueueRequest mocks base method
func (m *MockBatchAPI) UpdateJobQueueRequest(arg0 *batch.UpdateJobQueueInput) (*request.Request, *batch.UpdateJobQueueOutput) {
	ret := m.ctrl.Call(m, "UpdateJobQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.UpdateJobQueueOutput)
	return ret0, ret1
}

// UpdateJobQueueRequest indicates an expected call of UpdateJobQueueRequest
func (mr *MockBatchAPIMockRecorder) UpdateJobQueueRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobQueueRequest", reflect.TypeOf((*MockBatchAPI)(nil).UpdateJobQueueRequest), arg0)
}

// UpdateJobQueueWithContext mocks base method
func (m *MockBatchAPI) UpdateJobQueueWithContext(arg0 aws.Context, arg1 *batch.UpdateJobQueueInput, arg2 ...request.Option) (*batch.UpdateJobQueueOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJobQueueWithContext", varargs...)
	ret0, _ := ret[0].(*batch.UpdateJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobQueueWithContext indicates an expected call of UpdateJobQueueWithContext
func (mr *MockBatchAPIMockRecorder) UpdateJobQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobQueueWithContext", reflect.TypeOf((*MockBatchAPI)(nil).UpdateJobQueueWithContext), varargs...)
}
