// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/aws-sdk-go/service/batch/batchiface (interfaces: BatchAPI)

package mock_batchiface

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	batch "github.com/aws/aws-sdk-go/service/batch"
	gomock "github.com/golang/mock/gomock"
)

// Mock of BatchAPI interface
type MockBatchAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockBatchAPIRecorder
}

// Recorder for MockBatchAPI (not exported)
type _MockBatchAPIRecorder struct {
	mock *MockBatchAPI
}

func NewMockBatchAPI(ctrl *gomock.Controller) *MockBatchAPI {
	mock := &MockBatchAPI{ctrl: ctrl}
	mock.recorder = &_MockBatchAPIRecorder{mock}
	return mock
}

func (_m *MockBatchAPI) EXPECT() *_MockBatchAPIRecorder {
	return _m.recorder
}

func (_m *MockBatchAPI) CancelJob(_param0 *batch.CancelJobInput) (*batch.CancelJobOutput, error) {
	ret := _m.ctrl.Call(_m, "CancelJob", _param0)
	ret0, _ := ret[0].(*batch.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) CancelJob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelJob", arg0)
}

func (_m *MockBatchAPI) CancelJobRequest(_param0 *batch.CancelJobInput) (*request.Request, *batch.CancelJobOutput) {
	ret := _m.ctrl.Call(_m, "CancelJobRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.CancelJobOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) CancelJobRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelJobRequest", arg0)
}

func (_m *MockBatchAPI) CancelJobWithContext(_param0 aws.Context, _param1 *batch.CancelJobInput, _param2 ...request.Option) (*batch.CancelJobOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CancelJobWithContext", _s...)
	ret0, _ := ret[0].(*batch.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) CancelJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelJobWithContext", _s...)
}

func (_m *MockBatchAPI) CreateComputeEnvironment(_param0 *batch.CreateComputeEnvironmentInput) (*batch.CreateComputeEnvironmentOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateComputeEnvironment", _param0)
	ret0, _ := ret[0].(*batch.CreateComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) CreateComputeEnvironment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateComputeEnvironment", arg0)
}

func (_m *MockBatchAPI) CreateComputeEnvironmentRequest(_param0 *batch.CreateComputeEnvironmentInput) (*request.Request, *batch.CreateComputeEnvironmentOutput) {
	ret := _m.ctrl.Call(_m, "CreateComputeEnvironmentRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.CreateComputeEnvironmentOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) CreateComputeEnvironmentRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateComputeEnvironmentRequest", arg0)
}

func (_m *MockBatchAPI) CreateComputeEnvironmentWithContext(_param0 aws.Context, _param1 *batch.CreateComputeEnvironmentInput, _param2 ...request.Option) (*batch.CreateComputeEnvironmentOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateComputeEnvironmentWithContext", _s...)
	ret0, _ := ret[0].(*batch.CreateComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) CreateComputeEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateComputeEnvironmentWithContext", _s...)
}

func (_m *MockBatchAPI) CreateJobQueue(_param0 *batch.CreateJobQueueInput) (*batch.CreateJobQueueOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateJobQueue", _param0)
	ret0, _ := ret[0].(*batch.CreateJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) CreateJobQueue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateJobQueue", arg0)
}

func (_m *MockBatchAPI) CreateJobQueueRequest(_param0 *batch.CreateJobQueueInput) (*request.Request, *batch.CreateJobQueueOutput) {
	ret := _m.ctrl.Call(_m, "CreateJobQueueRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.CreateJobQueueOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) CreateJobQueueRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateJobQueueRequest", arg0)
}

func (_m *MockBatchAPI) CreateJobQueueWithContext(_param0 aws.Context, _param1 *batch.CreateJobQueueInput, _param2 ...request.Option) (*batch.CreateJobQueueOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateJobQueueWithContext", _s...)
	ret0, _ := ret[0].(*batch.CreateJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) CreateJobQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateJobQueueWithContext", _s...)
}

func (_m *MockBatchAPI) DeleteComputeEnvironment(_param0 *batch.DeleteComputeEnvironmentInput) (*batch.DeleteComputeEnvironmentOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteComputeEnvironment", _param0)
	ret0, _ := ret[0].(*batch.DeleteComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DeleteComputeEnvironment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteComputeEnvironment", arg0)
}

func (_m *MockBatchAPI) DeleteComputeEnvironmentRequest(_param0 *batch.DeleteComputeEnvironmentInput) (*request.Request, *batch.DeleteComputeEnvironmentOutput) {
	ret := _m.ctrl.Call(_m, "DeleteComputeEnvironmentRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DeleteComputeEnvironmentOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DeleteComputeEnvironmentRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteComputeEnvironmentRequest", arg0)
}

func (_m *MockBatchAPI) DeleteComputeEnvironmentWithContext(_param0 aws.Context, _param1 *batch.DeleteComputeEnvironmentInput, _param2 ...request.Option) (*batch.DeleteComputeEnvironmentOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteComputeEnvironmentWithContext", _s...)
	ret0, _ := ret[0].(*batch.DeleteComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DeleteComputeEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteComputeEnvironmentWithContext", _s...)
}

func (_m *MockBatchAPI) DeleteJobQueue(_param0 *batch.DeleteJobQueueInput) (*batch.DeleteJobQueueOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteJobQueue", _param0)
	ret0, _ := ret[0].(*batch.DeleteJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DeleteJobQueue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteJobQueue", arg0)
}

func (_m *MockBatchAPI) DeleteJobQueueRequest(_param0 *batch.DeleteJobQueueInput) (*request.Request, *batch.DeleteJobQueueOutput) {
	ret := _m.ctrl.Call(_m, "DeleteJobQueueRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DeleteJobQueueOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DeleteJobQueueRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteJobQueueRequest", arg0)
}

func (_m *MockBatchAPI) DeleteJobQueueWithContext(_param0 aws.Context, _param1 *batch.DeleteJobQueueInput, _param2 ...request.Option) (*batch.DeleteJobQueueOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteJobQueueWithContext", _s...)
	ret0, _ := ret[0].(*batch.DeleteJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DeleteJobQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteJobQueueWithContext", _s...)
}

func (_m *MockBatchAPI) DeregisterJobDefinition(_param0 *batch.DeregisterJobDefinitionInput) (*batch.DeregisterJobDefinitionOutput, error) {
	ret := _m.ctrl.Call(_m, "DeregisterJobDefinition", _param0)
	ret0, _ := ret[0].(*batch.DeregisterJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DeregisterJobDefinition(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterJobDefinition", arg0)
}

func (_m *MockBatchAPI) DeregisterJobDefinitionRequest(_param0 *batch.DeregisterJobDefinitionInput) (*request.Request, *batch.DeregisterJobDefinitionOutput) {
	ret := _m.ctrl.Call(_m, "DeregisterJobDefinitionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DeregisterJobDefinitionOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DeregisterJobDefinitionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterJobDefinitionRequest", arg0)
}

func (_m *MockBatchAPI) DeregisterJobDefinitionWithContext(_param0 aws.Context, _param1 *batch.DeregisterJobDefinitionInput, _param2 ...request.Option) (*batch.DeregisterJobDefinitionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeregisterJobDefinitionWithContext", _s...)
	ret0, _ := ret[0].(*batch.DeregisterJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DeregisterJobDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterJobDefinitionWithContext", _s...)
}

func (_m *MockBatchAPI) DescribeComputeEnvironments(_param0 *batch.DescribeComputeEnvironmentsInput) (*batch.DescribeComputeEnvironmentsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeComputeEnvironments", _param0)
	ret0, _ := ret[0].(*batch.DescribeComputeEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeComputeEnvironments(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeComputeEnvironments", arg0)
}

func (_m *MockBatchAPI) DescribeComputeEnvironmentsRequest(_param0 *batch.DescribeComputeEnvironmentsInput) (*request.Request, *batch.DescribeComputeEnvironmentsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeComputeEnvironmentsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DescribeComputeEnvironmentsOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeComputeEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeComputeEnvironmentsRequest", arg0)
}

func (_m *MockBatchAPI) DescribeComputeEnvironmentsWithContext(_param0 aws.Context, _param1 *batch.DescribeComputeEnvironmentsInput, _param2 ...request.Option) (*batch.DescribeComputeEnvironmentsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeComputeEnvironmentsWithContext", _s...)
	ret0, _ := ret[0].(*batch.DescribeComputeEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeComputeEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeComputeEnvironmentsWithContext", _s...)
}

func (_m *MockBatchAPI) DescribeJobDefinitions(_param0 *batch.DescribeJobDefinitionsInput) (*batch.DescribeJobDefinitionsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeJobDefinitions", _param0)
	ret0, _ := ret[0].(*batch.DescribeJobDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeJobDefinitions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeJobDefinitions", arg0)
}

func (_m *MockBatchAPI) DescribeJobDefinitionsRequest(_param0 *batch.DescribeJobDefinitionsInput) (*request.Request, *batch.DescribeJobDefinitionsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeJobDefinitionsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DescribeJobDefinitionsOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeJobDefinitionsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeJobDefinitionsRequest", arg0)
}

func (_m *MockBatchAPI) DescribeJobDefinitionsWithContext(_param0 aws.Context, _param1 *batch.DescribeJobDefinitionsInput, _param2 ...request.Option) (*batch.DescribeJobDefinitionsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeJobDefinitionsWithContext", _s...)
	ret0, _ := ret[0].(*batch.DescribeJobDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeJobDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeJobDefinitionsWithContext", _s...)
}

func (_m *MockBatchAPI) DescribeJobQueues(_param0 *batch.DescribeJobQueuesInput) (*batch.DescribeJobQueuesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeJobQueues", _param0)
	ret0, _ := ret[0].(*batch.DescribeJobQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeJobQueues(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeJobQueues", arg0)
}

func (_m *MockBatchAPI) DescribeJobQueuesRequest(_param0 *batch.DescribeJobQueuesInput) (*request.Request, *batch.DescribeJobQueuesOutput) {
	ret := _m.ctrl.Call(_m, "DescribeJobQueuesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DescribeJobQueuesOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeJobQueuesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeJobQueuesRequest", arg0)
}

func (_m *MockBatchAPI) DescribeJobQueuesWithContext(_param0 aws.Context, _param1 *batch.DescribeJobQueuesInput, _param2 ...request.Option) (*batch.DescribeJobQueuesOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeJobQueuesWithContext", _s...)
	ret0, _ := ret[0].(*batch.DescribeJobQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeJobQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeJobQueuesWithContext", _s...)
}

func (_m *MockBatchAPI) DescribeJobs(_param0 *batch.DescribeJobsInput) (*batch.DescribeJobsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeJobs", _param0)
	ret0, _ := ret[0].(*batch.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeJobs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeJobs", arg0)
}

func (_m *MockBatchAPI) DescribeJobsRequest(_param0 *batch.DescribeJobsInput) (*request.Request, *batch.DescribeJobsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeJobsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.DescribeJobsOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeJobsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeJobsRequest", arg0)
}

func (_m *MockBatchAPI) DescribeJobsWithContext(_param0 aws.Context, _param1 *batch.DescribeJobsInput, _param2 ...request.Option) (*batch.DescribeJobsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeJobsWithContext", _s...)
	ret0, _ := ret[0].(*batch.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) DescribeJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeJobsWithContext", _s...)
}

func (_m *MockBatchAPI) ListJobs(_param0 *batch.ListJobsInput) (*batch.ListJobsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListJobs", _param0)
	ret0, _ := ret[0].(*batch.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListJobs", arg0)
}

func (_m *MockBatchAPI) ListJobsRequest(_param0 *batch.ListJobsInput) (*request.Request, *batch.ListJobsOutput) {
	ret := _m.ctrl.Call(_m, "ListJobsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.ListJobsOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListJobsRequest", arg0)
}

func (_m *MockBatchAPI) ListJobsWithContext(_param0 aws.Context, _param1 *batch.ListJobsInput, _param2 ...request.Option) (*batch.ListJobsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListJobsWithContext", _s...)
	ret0, _ := ret[0].(*batch.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListJobsWithContext", _s...)
}

func (_m *MockBatchAPI) RegisterJobDefinition(_param0 *batch.RegisterJobDefinitionInput) (*batch.RegisterJobDefinitionOutput, error) {
	ret := _m.ctrl.Call(_m, "RegisterJobDefinition", _param0)
	ret0, _ := ret[0].(*batch.RegisterJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) RegisterJobDefinition(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterJobDefinition", arg0)
}

func (_m *MockBatchAPI) RegisterJobDefinitionRequest(_param0 *batch.RegisterJobDefinitionInput) (*request.Request, *batch.RegisterJobDefinitionOutput) {
	ret := _m.ctrl.Call(_m, "RegisterJobDefinitionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.RegisterJobDefinitionOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) RegisterJobDefinitionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterJobDefinitionRequest", arg0)
}

func (_m *MockBatchAPI) RegisterJobDefinitionWithContext(_param0 aws.Context, _param1 *batch.RegisterJobDefinitionInput, _param2 ...request.Option) (*batch.RegisterJobDefinitionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RegisterJobDefinitionWithContext", _s...)
	ret0, _ := ret[0].(*batch.RegisterJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) RegisterJobDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterJobDefinitionWithContext", _s...)
}

func (_m *MockBatchAPI) SubmitJob(_param0 *batch.SubmitJobInput) (*batch.SubmitJobOutput, error) {
	ret := _m.ctrl.Call(_m, "SubmitJob", _param0)
	ret0, _ := ret[0].(*batch.SubmitJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) SubmitJob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SubmitJob", arg0)
}

func (_m *MockBatchAPI) SubmitJobRequest(_param0 *batch.SubmitJobInput) (*request.Request, *batch.SubmitJobOutput) {
	ret := _m.ctrl.Call(_m, "SubmitJobRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.SubmitJobOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) SubmitJobRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SubmitJobRequest", arg0)
}

func (_m *MockBatchAPI) SubmitJobWithContext(_param0 aws.Context, _param1 *batch.SubmitJobInput, _param2 ...request.Option) (*batch.SubmitJobOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SubmitJobWithContext", _s...)
	ret0, _ := ret[0].(*batch.SubmitJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) SubmitJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SubmitJobWithContext", _s...)
}

func (_m *MockBatchAPI) TerminateJob(_param0 *batch.TerminateJobInput) (*batch.TerminateJobOutput, error) {
	ret := _m.ctrl.Call(_m, "TerminateJob", _param0)
	ret0, _ := ret[0].(*batch.TerminateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) TerminateJob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TerminateJob", arg0)
}

func (_m *MockBatchAPI) TerminateJobRequest(_param0 *batch.TerminateJobInput) (*request.Request, *batch.TerminateJobOutput) {
	ret := _m.ctrl.Call(_m, "TerminateJobRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.TerminateJobOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) TerminateJobRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TerminateJobRequest", arg0)
}

func (_m *MockBatchAPI) TerminateJobWithContext(_param0 aws.Context, _param1 *batch.TerminateJobInput, _param2 ...request.Option) (*batch.TerminateJobOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TerminateJobWithContext", _s...)
	ret0, _ := ret[0].(*batch.TerminateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) TerminateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TerminateJobWithContext", _s...)
}

func (_m *MockBatchAPI) UpdateComputeEnvironment(_param0 *batch.UpdateComputeEnvironmentInput) (*batch.UpdateComputeEnvironmentOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateComputeEnvironment", _param0)
	ret0, _ := ret[0].(*batch.UpdateComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) UpdateComputeEnvironment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateComputeEnvironment", arg0)
}

func (_m *MockBatchAPI) UpdateComputeEnvironmentRequest(_param0 *batch.UpdateComputeEnvironmentInput) (*request.Request, *batch.UpdateComputeEnvironmentOutput) {
	ret := _m.ctrl.Call(_m, "UpdateComputeEnvironmentRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.UpdateComputeEnvironmentOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) UpdateComputeEnvironmentRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateComputeEnvironmentRequest", arg0)
}

func (_m *MockBatchAPI) UpdateComputeEnvironmentWithContext(_param0 aws.Context, _param1 *batch.UpdateComputeEnvironmentInput, _param2 ...request.Option) (*batch.UpdateComputeEnvironmentOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateComputeEnvironmentWithContext", _s...)
	ret0, _ := ret[0].(*batch.UpdateComputeEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) UpdateComputeEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateComputeEnvironmentWithContext", _s...)
}

func (_m *MockBatchAPI) UpdateJobQueue(_param0 *batch.UpdateJobQueueInput) (*batch.UpdateJobQueueOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateJobQueue", _param0)
	ret0, _ := ret[0].(*batch.UpdateJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) UpdateJobQueue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateJobQueue", arg0)
}

func (_m *MockBatchAPI) UpdateJobQueueRequest(_param0 *batch.UpdateJobQueueInput) (*request.Request, *batch.UpdateJobQueueOutput) {
	ret := _m.ctrl.Call(_m, "UpdateJobQueueRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*batch.UpdateJobQueueOutput)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) UpdateJobQueueRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateJobQueueRequest", arg0)
}

func (_m *MockBatchAPI) UpdateJobQueueWithContext(_param0 aws.Context, _param1 *batch.UpdateJobQueueInput, _param2 ...request.Option) (*batch.UpdateJobQueueOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateJobQueueWithContext", _s...)
	ret0, _ := ret[0].(*batch.UpdateJobQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBatchAPIRecorder) UpdateJobQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateJobQueueWithContext", _s...)
}
