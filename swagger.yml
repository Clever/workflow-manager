swagger: '2.0'
info:
  title: workflow-manager
  description: Minimal Workflow orchestrator for AWS Batch
  # when changing the version here, make sure to
  # 1. re-run `make generate` to generate clients and server
  # 2. merge the new clients, and, after merging, tag the commit with the version:
  #    git tag -a vX.Y.Z -m "vX.Y.Z"
  #    git push origin --tags
  version: 0.6.2
  x-npm-package: workflow-manager
schemes:
  - http
produces:
  - application/json

responses:
  BadRequest:
    description: "Bad Request"
    schema:
      $ref: "#/definitions/BadRequest"
  InternalError:
    description: "Internal Error"
    schema:
      $ref: "#/definitions/InternalError"
  NotFound:
    description: "Entity Not Found"
    schema:
      $ref: "#/definitions/NotFound"

paths:
  /_health:
    get:
      operationId: healthCheck
      description: Checks if the service is healthy
      responses:
        200:
          description: OK response

  /workflow-definitions:
    get:
      operationId: getWorkflowDefinitions
      description: Get the latest versions of all available WorkflowDefinitions
      responses:
        200:
          description: Successfully fetched all WorkflowDefinitions
          schema:
            type: array
            items:
              $ref: '#/definitions/WorkflowDefinition'
    post:
      operationId: newWorkflowDefinition
      summary: Create a new WorkflowDefinition
      parameters:
        - name: NewWorkflowDefinitionRequest
          in: body
          schema:
            $ref: '#/definitions/NewWorkflowDefinitionRequest'
      responses:
        201:
          description: Successful creation of a new WorkflowDefinition
          schema:
            $ref: '#/definitions/WorkflowDefinition'

  /workflow-definitions/{name}:
    get:
      summary: List WorkflowDefinition Versions by Name
      operationId: getWorkflowDefinitionVersionsByName
      parameters:
        - name: name
          in: path
          type: string
          required: true
        - name: latest
          in: query
          type: boolean
          required: false
          default: true
      responses:
        200:
          description: WorkflowDefinitions
          schema:
            type: array
            items:
              $ref: "#/definitions/WorkflowDefinition"
        404:
          $ref: "#/responses/NotFound"
    put:
      operationId: updateWorkflowDefinition
      summary: Update an exiting WorkflowDefinition
      parameters:
        - name: NewWorkflowDefinitionRequest
          in: body
          schema:
            $ref: '#/definitions/NewWorkflowDefinitionRequest'
        - name: name
          in: path
          type: string
          required: true
      responses:
        201:
          description: Successful creation of a new WorkflowDefinition
          schema:
            $ref: '#/definitions/WorkflowDefinition'
        404:
          $ref: "#/responses/NotFound"

  /workflow-definitions/{name}/{version}:
    get:
      summary: Get a WorkflowDefinition by Name and Version
      operationId: getWorkflowDefinitionByNameAndVersion
      parameters:
        - name: name
          in: path
          type: string
          required: true
        - name: version
          in: path
          type: integer
          required: true
      responses:
        200:
          description: WorkflowDefinition
          schema:
            $ref: "#/definitions/WorkflowDefinition"
        404:
          $ref: "#/responses/NotFound"

  /workflows:
    post:
      summary: Start a Workflow
      operationId: startWorkflow
      parameters:
        - name: StartWorkflowRequest
          description: Parameters for starting a workflow (workflow definition, input, and optionally namespace, queue, and tags)
          in: body
          schema:
            $ref: "#/definitions/StartWorkflowRequest"
      responses:
        200:
          description: Responds with Workflow details including Id, Status, Jobs, Input, Namespace, and WorkflowDefinition
          schema:
            $ref: "#/definitions/Workflow"
        404:
          $ref: "#/responses/NotFound"

    get:
      summary: Get summary of all active Workflows for a given WorkflowDefinition
      operationId: getWorkflows
      x-paging:
        pageParameter: pageToken
      parameters:
        # TODO: Add date range filters.
        - name: limit
          description:
            Maximum number of workflows to return.
            Defaults to 10.
            Restricted to a max of 10,000.
          in: query
          type: integer
          format: int32
        - name: oldestFirst
          in: query
          type: boolean
        - name: pageToken
          in: query
          type: string
        - name: status
          in: query
          type: string
        - name: summaryOnly
          description:
            Limits workflow data to the bare minimum - omits the full workflow definition and job
            data.
          in: query
          type: boolean
          default: false
        - name: workflowDefinitionName
          in: query
          type: string
          required: true
      responses:
        200:
          description: Workflow
          schema:
            type: array
            items:
              $ref: "#/definitions/Workflow"
        404:
          $ref: "#/responses/NotFound"

  /workflows/{workflowID}:
    get:
      summary: Get details for a single Workflow, given a workflowID
      operationId: getWorkflowByID
      parameters:
        - name: workflowID
          in: path
          type: string
          required: true
      responses:
        200:
          description: Workflow
          schema:
            $ref: "#/definitions/Workflow"
        404:
          $ref: "#/responses/NotFound"
    delete:
      summary: Cancel workflow with the given workflowID
      operationId: CancelWorkflow
      parameters:
        - name: workflowID
          in: path
          type: string
          required: true
        - name: reason
          in: body
          schema:
            $ref: "#/definitions/CancelReason"
          required: true
      responses:
        200:
          type: string
        404:
          $ref: "#/responses/NotFound"

  /state-resources:
    post:
      summary: Create or Update a StateResource
      operationId: postStateResource
      parameters:
        - name: NewStateResource
          in: body
          schema:
            $ref: '#/definitions/NewStateResource'
      responses:
        201:
          description: StateResource Successfully saved
          schema:
            $ref: "#/definitions/StateResource"

  /state-resources/{namespace}/{name}:
    get:
      summary: Get details about StateResource given the namespace and name
      operationId: getStateResource
      parameters:
        - name: namespace
          in: path
          type: string
          required: true
        - name: name
          in: path
          type: string
          required: true
      responses:
        200:
          description: StateResource
          schema:
            $ref: "#/definitions/StateResource"
        404:
          $ref: "#/responses/NotFound"
    put:
      summary: Create or Update a StateResource for the name and namespace
      operationId: putStateResource
      parameters:
        - name: namespace
          in: path
          type: string
          required: true
        - name: name
          type: string
          in: path
          required: true
        - name: NewStateResource
          in: body
          schema:
            $ref: '#/definitions/NewStateResource'
      responses:
        201:
          description: StateResource Successfully saved
          schema:
            $ref: "#/definitions/StateResource"
        400:
          $ref: "#/responses/BadRequest"
    delete:
      summary: Delete an existing StateResource
      operationId: deleteStateResource
      parameters:
        - name: namespace
          in: path
          type: string
          required: true
        - name: name
          type: string
          in: path
          required: true
      responses:
        200:
          description: StateResource deleted successfully
        404:
          $ref: "#/responses/NotFound"

definitions:
  InternalError:
    type: object
    properties:
      message:
        type: string

  BadRequest:
    type: object
    properties:
      message:
        type: string

  NotFound:
    type: object
    properties:
      message:
        type: string

  NewWorkflowDefinitionRequest:
    type: object
    properties:
      name:
        type: string
      manager:
        $ref: '#/definitions/Manager'
      stateMachine:
        $ref: '#/definitions/SLStateMachine'

  WorkflowDefinition:
    type: object
    properties:
      id:
        type: string
      version:
        type: integer
      name:
        type: string
      createdAt:
        type: string
        format: date-time
      manager:
        $ref: '#/definitions/Manager'
      stateMachine:
        $ref: '#/definitions/SLStateMachine'

  Manager:
    type: string
    enum:
      - "batch"
      - "step-functions"

  Workflow:
    type: object
    properties:
      id:
        type: string
      createdAt:
        type: string
        format: date-time
      lastUpdated:
        type: string
        format: date-time
      workflowDefinition:
        $ref: '#/definitions/WorkflowDefinition'
      status:
        $ref: '#/definitions/WorkflowStatus'
      statusReason:
        type: string
      jobs:
        type: array
        items:
          $ref: '#/definitions/Job'
      namespace:
        type: string
      queue:
        type: string
      input:
        # format: json
        type: string
      tags:
        description: "tags: object with key-value pairs; keys and values should be strings"
        additionalProperties:
          type: object

  WorkflowStatus:
    type: string
    enum:
      - "queued"
      - "running"
      - "failed"
      - "succeeded"
      - "cancelled"

  Job:
    type: object
    properties:
      id:
        type: string
      attempts:
        type: array
        items:
          $ref: '#/definitions/JobAttempt'
      container:
        type: string
      createdAt:
        type: string
        format: date-time
      input:
        # format: json
        type: string
      name:
        type: string
      output:
        # format: json
        type: string
      queue:
        type: string
      startedAt:
        type: string
        format: date-time
      state:
        type: string
      stateResource:
        $ref: '#/definitions/StateResource'
      status:
        $ref: '#/definitions/JobStatus'
      statusReason:
        type: string
      stoppedAt:
        type: string
        format: date-time

  JobStatus:
    type: string
    enum:
      - "created"
      - "queued"
      - "waiting_for_deps"
      - "running"
      - "succeeded"
      - "failed"
      - "aborted_deps_failed"
      - "aborted_by_user"

  JobAttempt:
    type: object
    properties:
      startedAt:
        type: string
        format: date-time
      stoppedAt:
        type: string
        format: date-time
      containerInstanceARN:
        type: string
      taskARN:
        type: string
      reason:
        type: string
      exitCode:
        type: integer

  StartWorkflowRequest:
    type: object
    properties:
      workflowDefinition:
        $ref: '#/definitions/WorkflowDefinitionRef'
      input:
        # format: json
        type: string
      namespace:
        type: string
      queue:
        type: string
        default: "default"
      tags:
        description: "tags: object with key-value pairs; keys and values should be strings"
        additionalProperties:
          type: object

  WorkflowDefinitionRef:
    type: object
    properties:
      name:
        type: string
      version:
        type: integer

  CancelReason:
    type: object
    properties:
      reason:
        type: string

  NewStateResource:
    type: object
    properties:
      name:
        type: string
      namespace:
        type: string
      uri:
        type: string

  StateResource:
    type: object
    properties:
      name:
        type: string
      namespace:
        type: string
      uri:
        type: string
      lastUpdated:
        type: string
        format: date-time
      type:
        $ref: '#/definitions/StateResourceType'

  StateResourceType:
    type: string
    enum:
      - "JobDefinitionARN"
      - "ActivityARN"

  # States Language Types: https://states-language.net/spec.html
  SLStateMachine:
    type: object
    properties:
      StartAt:
        type: string
      Comment:
        type: string
      Version:
        type: string
        enum: ["1.0"]
      TimeoutSeconds:
        type: integer
      States:
        additionalProperties:
          $ref: '#/definitions/SLState'

  SLState:
    type: object
    properties:
      Type:
        $ref: '#/definitions/SLStateType'
      Resource:
        type: string
      Comment:
        type: string
      Next:
        type: string
      End:
        type: boolean
      InputPath:
        type: string
      OutputPath:
        type: string
      ResultPath:
        type: string
      Retry:
        type: array
        items:
          $ref: '#/definitions/SLRetrier'
      TimeoutSeconds:
        type: integer
      HeartbeatSeconds:
        type: integer

  SLRetrier:
    type: object
    properties:
      IntervalSeconds:
        type: integer
      MaxAttempts:
        type: integer
      BackoffRate:
        type: number
      ErrorEquals:
        type: array
        items:
          $ref: '#/definitions/SLErrorEquals'
      MaxAttempts:
        type: integer
        minimum: 0
        maximum: 10

  SLStateType:
    type: string
    enum:
      - "Pass"
      - "Task"
      - "Choice"
      - "Wait"
      - "Succeed"
      - "Fail"
      - "Parallel"

  SLErrorEquals:
    type: string
